```{r setup, include = TRUE}
knitr::opts_knit$set(echo = TRUE, root.dir = '..')
## install and load libraries
## knitr for PDF creation
if (!require(knitr)) install.packages('knitr')
library(knitr)
## tidyverse for ggplot, dplyr, data manipulation
if (!require(tidyverse)) install.packages('tidyverse')
library(tidyverse)
## cowplot for plot organization
if (!require(cowplot)) install.packages('cowplot')
library(cowplot)
## kableExtra for table creation
if (!require(kableExtra)) install.packages('kableExtra')
library(kableExtra)
## ggbeeswarm for jiggering plots better than geom_jigger
## does not work with NAs
if (!require(ggbeeswarm)) install.packages('ggbeeswarm')
library(ggbeeswarm)
## patchwork for aligning plots
if (!require(patchwork)) install.packages('patchwork')
library(patchwork)
## magick for drawing images
if (!require(magick)) install.packages('magick')
library(magick)
## openxlsx for making source data file
if (!require(openxlsx)) install.packages('openxlsx')
library(openxlsx)
## Create directories for figures, tables, etc.
dir.create(path = "./Main_figures")
dir.create(path = "./Supp_figures")
dir.create(path = "./Supp_tables")
## set up color palette
pal <- c("#CA0020", "#92C5DE", "#F4A582", "#0571B0", "#999999")
## set up ggplot to look pretty for cowplot grid
ggplot <- function(...) {
ggplot2::ggplot(...) +
theme_cowplot() +
## hide gridlines
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
## change legend details
legend.position = "top",
legend.justification = "center",
legend.key = element_rect(fill = "white", size = 0.7),
legend.background = element_rect(fill = "NA"),
legend.title = element_blank(),
## change text sizes
axis.title = element_text(size = 15, color = "black"),
axis.title.x = element_blank(),
axis.text = element_text(size = 13, color = "black"),
legend.text = element_text(size = 13, color = "black"),
## adjust plot title location
plot.title = element_text(hjust = 0.5)) +
## allow points to be plotted on axes
coord_cartesian(clip = "off")
}
## blank ggplot with labels for alignment
label_plot <- function(...){
ggplot(...) +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.text.x = element_text(hjust = 0),
plot.title = element_text(hjust = 0.5, size = 36))
}
## function to format x axis label
addline_format <- function(x){
y <- gsub("^\\s", "", x)
y <- gsub("\\s", "\n\n", y)
paste0("\n", y)
}
## function to grab guides and create labels for plot axes
label_grab <- function(x){
grab <- x$guide
new_label <- paste0("\nCas9\n\n", grab, "\n\ndRNA")
return(new_label)
}
## function to calculate ratios
ratio_calc <- function(x){
## filter out low reads and negative controls
temp_ratio <- filter(x, Reads_passing >= 1000 &
X_lab != "- - -" &
X_lab != "- - - -" &
X_lab != "- - - - -") %>%
## divide for future join
separate(col = Site, into = c("guide", "location"), sep = " (?=[^ ]+$)")
## split into two temporary  files
ratio_on <- filter(temp_ratio, location == "ON")
ratio_off <- filter(temp_ratio, location != "ON") %>%
## ensure nonzero to prevent inifite ratios
mutate(Indel_stringent = replace(Indel_stringent,
Indel_stringent == 0,
0.01))
## join based on guide, plot, calculate ratio, plot
ratio_plots <- full_join(ratio_on, ratio_off,
by = c("Experiment", "Name", "X_lab", "guide"),
suffix = c("_ON", "_OT")) %>%
mutate(ratio = Indel_stringent_ON / Indel_stringent_OT) # calculates ratio
return(ratio_plots)
}
## calculate ratios for hifi
ratio_calc_hifi <- function(x){
## filter out low read counts and negative controls
temp_ratio <- filter(x, Reads_passing >= 1000 &
X_lab != "- - -" &
X_lab != "- - - -" &
X_lab != "- - - - -") %>%
## divide
separate(col = Site, into = c("guide", "location"), sep = " (?=[^ ]+$)")
## split into two temporary files
ratio_on <- filter(temp_ratio, location == "ON")
ratio_off <- filter(temp_ratio, location != "ON") %>%
## make sure all nonzero so no infinite ratios
mutate(Indel_stringent = replace(Indel_stringent,
Indel_stringent == 0,
0.01))
## join based on guide and calculate ratio
ratio_plots <- full_join(ratio_on, ratio_off,
by = c("Experiment", "Name",
"X_lab", "guide",
"X_order", "Cas9"),
suffix = c("_ON", "_OT")) %>%
mutate(ratio = Indel_stringent_ON / Indel_stringent_OT)
return(ratio_plots)
}
## longer version for multi-dRNAs
ratio_calc_longer <- function(x){
## filter out less than 1000 reads and neg controls
temp_ratio <- filter(x, Reads_passing >= 1000 &
X_lab != "- - -") %>%
## divide site
separate(col = Site, into = c("guide", "location"), sep = " (?=[^ ]+$)")
## split into two temporary  files
ratio_on <- filter(temp_ratio, location == "ON")
ratio_off <- filter(temp_ratio, location != "ON") %>%
## make sure all nonzero so no infinite ratios
mutate(Indel_stringent = replace(Indel_stringent,
Indel_stringent == 0,
0.01))
## join based on guide, calculate ratio
ratio_plots <- full_join(ratio_on, ratio_off,
by = c("Experiment", "Name", "X_lab", "guide"),
suffix = c("_ON", "_OT")) %>%
mutate(ratio = Indel_stringent_ON / Indel_stringent_OT)
return(ratio_plots)
}
## add max value to plots and divide evenly for nice plotting
round_max <- function(x){
## find max plotted value
if ("Indel_stringent" %in% colnames(x)){
maxval <- max(x$Indel_stringent) * 1.1
} else {
maxval <- max(x$ratio) * 1.1
}
## round the value to no significant digits
roundmax <- round(maxval, digits = 0)
## round values to nearest 5 if less than 25
if (roundmax <= 25){
if (roundmax %% 5 != 0){
roundmax = roundmax + 5 - (roundmax %% 5)
}
## round values to nearest 10 if between 25 and 100
} else if (roundmax > 25 & roundmax <= 100){
if (roundmax %% 10 != 0){
roundmax = roundmax + 10 - (roundmax %% 10)
}
## round values to nearest 50 if between 100 and 250
} else if (roundmax > 100 & roundmax <= 250){
if (roundmax %% 50 != 0){
roundmax = roundmax + 50 - (roundmax %% 50)
}
## round values to nearest 100 if greater than 250
} else if (roundmax >= 250){
if (roundmax %% 100 != 0){
roundmax = roundmax + 100 - (roundmax %% 100)
}
}
return(roundmax)
}
## grouped split function for generating source data file
named_group_split <- function(.tbl, ...) {
grouped <- group_by(.tbl, ...)
names <- rlang::eval_bare(rlang::expr(paste(!!!group_keys(grouped), sep = " / ")))
grouped %>%
group_split(keep = FALSE) %>%
rlang::set_names(names)
}
## function to create source data file for a figure with indel data
indel_source <- function(.tbl, ...){
group_by(.tbl, Experiment) %>%
mutate(target2 = if_else(str_detect(target, "OT") == TRUE,
"OT", "ON")) %>%
ungroup() %>%
select(Panel, Name, guide, X_lab, Indel_stringent, target, target2) %>%
pivot_wider(names_from = target2,
values_from = c(Indel_stringent, target)) %>%
arrange(Panel, Name) %>%
select(Panel, Name, guide, target_OT, X_lab, Indel_stringent_ON, Indel_stringent_OT) %>%
rename("Indels ON" = Indel_stringent_ON,
"Indels OT" = Indel_stringent_OT,
"Off-target" = target_OT,
"X label" = X_lab,
"Guide" = guide)
}
## function to create source data file for a figure with ratio data
ratio_source <- function(.tbl, ...){
arrange(.tbl, Panel, Name) %>%
select(Panel, Name, guide, location_OT, X_lab, ratio) %>%
rename("Off-target" = location_OT,
"X label" = X_lab,
"Guide" = guide,
"Ratio" = ratio)
}
